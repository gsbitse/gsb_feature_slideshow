<?php
/**
 * @file
 * Drupal needs this blank file.
 */

include_once 'gsb_feature_slideshow.features.inc';

 /**
 * Implements hook_entity_info_alter().
 *
 * Here we tell Drupal about our custom fpp -
 * 'gsb_slideshow_fpp'.
 *
 */
function gsb_feature_slideshow_entity_info_alter(&$entity_info) {

  // create the GSB Slideshow FPP

  $entity_info['fieldable_panels_pane']['bundles']['gsb_slideshow_fpp'] = array(
    'label' => t('Add GSB slideshow'),
    'pane category' => t('GSB Slideshow FPP'),
    'pane top level' => TRUE, // set to true to make this show as a top level icon
    'pane icon' => drupal_get_path('module', 'panopoly_widgets') . '/images/icon_text.png',
    'admin' => array(
      'path' => 'admin/structure/fieldable-panels-panes/manage/%fieldable_panels_panes_type',
      'bundle argument' => 4,
      // Note that this has all _ replaced with - from the bundle name.
      'real path' => 'admin/structure/fieldable-panels-panes/manage/gsb-slideshow-fpp',
      'access arguments' => array('administer fieldable panels panes'),
    ),
  );

}

/**
 * Implements hook_init()
 *
 * Here we tell Drupal about our javascript file
 *
 */
function gsb_feature_slideshow_init() {

  // Include the Slideshow Rotation time setting

  $rotation_time = 1000 * variable_get('panopoly_widgets_spotlight_rotation_time', 4);
  $js_variables = array('gsb_slideshow_settings' => array('rotation_time' => $rotation_time));

  drupal_add_js($js_variables, 'setting');

  // Add our custom javascript to the footer to override other things.
  drupal_add_js(drupal_get_path('module', 'gsb_feature_slideshow') . '/gsb_feature_slideshow.js', array('scope' => 'footer'));
}

// Formatter

/**
 * Implementation of hook_field_formatter_info().
 *
 * Here we tell Drupal about our custom field formatter -
 * 'gsb_slideshow_default_format'.
 *
 */
function gsb_feature_slideshow_field_formatter_info() {
  return array(
    'gsb_slideshow_default_format' => array(
      'label' => t('Field Collection Slideshow'),
      'field types' => array('field_collection'),
      'settings' => array('view_mode' => 'full'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function gsb_feature_slideshow_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {

  $element = array();

  $settings = $display['settings'];
  $formatter = $display['type'];

  drupal_add_library('system', 'ui.tabs');

  // Assemble the tabs header
  $header = '<ul>';
  foreach ($items as $delta => $item_data) {
    $header .= '<li>' . '<a href="#panopoly-spotlight-' . $delta . '">' . ($delta+1) . '</a></li>';
  }
  $header .= '</ul>';

  // Assemble the tabs content
  foreach ($items as $delta => $item_data) {
    if ($field_collection = field_collection_field_get_entity($item_data)) {
      $element[$delta]['#markup'] = ($delta == 0) ?
        $header .
        theme('gsb_slideshow_view', array('items' => $field_collection, 'delta' => $delta, 'settings' => $settings)) :
        theme('gsb_slideshow_view', array('items' => $field_collection, 'delta' => $delta, 'settings' => $settings));
    }
  }

  return $element;
}

// Formatter Settings Form

/**
 * Implements hook_field_formatter_settings_form().
 */
function gsb_feature_slideshow_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {

  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $element = array();

  if ($display['type'] == 'gsb_slideshow_default_format') {
    $element['view_mode'] = array(
      '#title'   => t('View mode'),
      '#type'    => 'select',
      '#options' => file_entity_view_mode_labels(),
      '#default_value' => $settings['view_mode'],
    );
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function gsb_feature_slideshow_field_formatter_settings_summary($field, $instance, $view_mode) {

  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = t('View Mode: @viewmode', array('@viewmode' => $settings['view_mode']));

  return $summary;
}

// Theme hookup and markup

/**
 * Implements hook_theme().
 */
function gsb_feature_slideshow_theme($existing, $type, $theme, $path) {

  return array(
    'gsb_slideshow_view' => array(
      'variables' => array(
        'items' => NULL,
        'delta' => NULL,
        'settings' => NULL,
      ),
    ),
  );
}

/**
 * Theme function for table view
 */
function theme_gsb_slideshow_view($variables) {

  if ($variables['items'] == null) {
    return;
  }

  $items = $variables['items'];

  $title = $items->field_slide_title['und'][0]['value'];
  $description = $items->field_description['und'][0]['value'];
  $button_text = $items->field_button_text['und'][0]['value'];
  $button_style = $items->field_button_style['und'][0]['value'];

  if (module_exists('uuid')) {
    $image_entity = entity_uuid_load('file', array($items->field_image_or_video['und'][0]['uuid']));
    $image = file_load(array_pop($image_entity)->fid);
  }
  else {
    $image = (object) $variables->items;
  }

  $link = $items->field_slide_link['und'][0]['value'];
  $settings = $variables['settings'];

  $output = "";

  if (is_array($items->field_image_or_video)) {

    $image = file_view((object) $items->field_image_or_video['und'][0], 'gsb_slideshow');

    $type = $items->field_image_or_video['und'][0]['type'];
    if ($type == 'image') {

      // Render the image

      $output = render($image);

    }
    elseif ($type == 'video') {

      // Get the video path.

      $video_path = drupal_realpath($type = $items->field_image_or_video['und'][0]['uri']);

      // If it's a youtube video we need to use the embed url.

      if ($items->field_image_or_video['und'][0]['filemime'] == 'video/youtube') {
        $video_parts = drupal_parse_url($video_path);
        if (stristr($video_parts['path'], 'watch')) {
          $video_path = str_replace('watch', 'embed', $video_parts['path']) . "/" . $video_parts['query']['v'];
        }
        $video_path .= '?autoplay=1';
      }

      // Create the image.

      $img_tag = theme_image_style(array(
        'style_name' => $image['file']['#style_name'],
        'path' => $image['file']['#path'],
        'alt' => $items->field_image_or_video['und'][0]['filename'],
        'width' => NULL,
        'height' => NULL
      ));

      // Print a link wrapper so that it can open in a modal.

      $output = '<div class="field field-type-image field-name-field-gsb-spotlight-media">';
      $output .=  l($img_tag, $video_path, array('attributes' => array('class' => 'fancybox fancybox.iframe'), 'html' => TRUE));
      $output .=  '<span class="video-play-icon"></span></div>';

    }

  }

  $class = 'panopoly-spotlight-wrapper ' . $button_style;
  $class .= (empty($variables['item']['fid'])) ? " no-image" : "";
  $output .= '<div class="' . $class . '">';

  $output .= '<div class="panopoly-spotlight-info">';
  $output .= '<h2>';

  if (!empty($link)) {
    $output .= '<a href="' . $link . '">';
  }

  if (!empty($title)) {
    $output .= $title;
  }
  $output .= '<i></i>';

  if (!empty($link)) {
    $output .= '</a>';
  }

  $output .= '</h2>';

  $output .= '<p>' . $description . '</p>';

  if (!empty($link) && !empty($button_text)) {
    $output .= '<a href="' . $link . '" class="slider-btn ' . $button_style . '">' . $button_text . '</a>';
  }

  $output .= '</div>';
  $output .= '</div>';

  return $output;
}

